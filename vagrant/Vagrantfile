require 'yaml'
disks                   = ENV['DISKS_LOCATION'] || 'disks/'  
openshift_repo          = ENV['OPENSHIFT_REPO_VERSION'] ||  'rhel-7-server-ose-3.7-rpms'
VAGRANTFILE_API_VERSION = '2'
REQUIRED_PLUGINS        = %w(vagrant-hostmanager)
SUGGESTED_PLUGINS       = %w(vagrant-sshfs landrush)
errors                  = []
servers                 = YAML.load_file('servers.yaml')
box_name                = ENV['BOX_NAME'] || 'rhel-7.2'

error_msg               = "Environment Variables SUBS_USERNAME and "
error_msg              += "SUBS_PASSWORD are mandatory fields to run this provisioning script. Please review "
error_msg              += "https://github.com/bandrade/local-ocp-with-vagrant/blob/master/README.md for mor information"

if ! ENV['SUBS_USERNAME'] or ! ENV['SUBS_PASSWORD']
 fail Vagrant::Errors::VagrantError.new, error_msg
end

def message(name)
  "#{name} plugin is not installed, run `vagrant plugin install #{name}` to install it."
end

SUGGESTED_PLUGINS.each { |plugin| print("note: " + message(plugin) + "\n") unless Vagrant.has_plugin?(plugin) }

# Validate and collect error message if plugin is not installed
REQUIRED_PLUGINS.each { |plugin| errors << message(plugin) unless Vagrant.has_plugin?(plugin) }
unless errors.empty?
  msg = errors.size > 1 ? "Errors: \n* #{errors.join("\n* ")}" : "Error: #{errors.first}"
  fail Vagrant::Errors::VagrantError.new, msg
end

#SET SUBSCRIPTION VARIABLES FOR SUBSCRIPTIONS AND REPOSITORIES
$set_environment_variables = <<SCRIPT
tee "/etc/profile.d/myvars.sh" > "/dev/null" <<EOF
# SUBS environment variables.
export SUBS_USERNAME=#{ENV['SUBS_USERNAME']}
export SUBS_PASSWORD=#{ENV['SUBS_PASSWORD']}
export OPENSHIFT_REPO=#{openshift_repo}
EOF
SCRIPT


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.registration.skip = true
  config.registration.unregister_on_halt = false
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
  
  config.vm.provision "shell", inline: $set_environment_variables, run: "always"
	
  if Vagrant.has_plugin?('landrush')
    config.landrush.enabled = true
    config.landrush.tld = 'example.com'
    config.landrush.guest_redirect_dns = false
  end

  # Suppress the default sync in both CentOS base and CentOS Atomic Host
  #  config.vm.synced_folder '.', '/vagrant', disabled: true
  #  config.vm.synced_folder '.', '/home/vagrant/sync', disabled: true

  servers.each do |servers|
    config.vm.define servers["alias"] do |serv|
	serv.vm.box = box_name
	serv.vm.network :private_network, ip: servers["ip"]
	serv.hostmanager.aliases = servers["alias"]
        serv.vm.hostname = servers["name"]
	
	serv.vm.provider :virtualbox do |domain|
		selected_disk = disks + servers["disk"]
		unless File.exist?(selected_disk)
       				domain.customize ['createhd', '--filename', selected_disk, '--size', servers["disk_size"]]
        		end
      			domain.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 1, '--device', 0,
					  '--type','hdd', '--medium', selected_disk]
   		domain.memory = servers["memory"]
	        domain.cpus   = servers["cpu"]

		#shared folders using sshfs
		if servers["sync"]
			servers["sync"].each do |sync| 
				serv.vm.synced_folder sync["source"], sync["target"], type: sync["sync_type"]
			end
		end

		#ansible provisioning 
		if servers["ansible"]
			servers["ansible"].each do |ans|   
				 serv.vm.provision :ansible_local do |ansible|
					ansible.verbose           = ans["verbose"]
				        ansible.install           = ans["install"]
			    	        ansible.limit             = ans["group"]
				        ansible.provisioning_path = ans["path"]
				        ansible.playbook          = ans["playbook"]
				        ansible.inventory_path    = ans["inventory"]
		                 end 	 
				
			end	
		end    
		
        end 
    end
	
  end

end


